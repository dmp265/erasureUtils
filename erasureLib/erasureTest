#! /bin/bash

#Copyright (c) 2015, Los Alamos National Security, LLC
#All rights reserved.
#
#Copyright 2015.  Los Alamos National Security, LLC. This software was produced
#under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
#Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
#the U.S. Department of Energy. The U.S. Government has rights to use, reproduce,
#and distribute this software.  NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL
#SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY
#FOR THE USE OF THIS SOFTWARE.  If software is modified to produce derivative
#works, such modified software should be clearly marked, so as not to confuse it
#with the version available from LANL.
# 
#Additionally, redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions are met:
#1. Redistributions of source code must retain the above copyright notice, this
#list of conditions and the following disclaimer.
#
#2. Redistributions in binary form must reproduce the above copyright notice,
#this list of conditions and the following disclaimer in the documentation
#and/or other materials provided with the distribution.
#3. Neither the name of Los Alamos National Security, LLC, Los Alamos National
#Laboratory, LANL, the U.S. Government, nor the names of its contributors may be
#used to endorse or promote products derived from this software without specific
#prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
#"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
#CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
#OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#-----
#NOTE:
#-----
#Although these files reside in a seperate repository, they fall under the MarFS copyright and license.
#
#MarFS is released under the BSD license.
#
#MarFS was reviewed and released by LANL under Los Alamos Computer Code identifier:
#LA-CC-15-039.
#
#These erasure utilites make use of the Intel Intelligent Storage Acceleration Library (Intel ISA-L), which can be found at https://github.com/01org/isa-l and is under its own license.
#
#MarFS uses libaws4c for Amazon S3 object communication. The original version
#is at https://aws.amazon.com/code/Amazon-S3/2601 and under the LGPL license.
#LANL added functionality to the original work. The original work plus
#LANL contributions is found at https://github.com/jti-lanl/aws4c.
#
#GNU licenses can be found at http://www.gnu.org/licenses/.

ITER=2 # Number of N+E file arrays to generate
INITER=2 # (Must be 1 until regeneration is added to lib!!!)Number of error patterns to test for each file array
POSTSLEEP=0 # Number of seconds the program should sleep after a test
WORK_DIRECTORY=wrkdir_errasureTest
TLOGPREF="$WORK_DIRECTORY/log_time."    # Prefix for execution time logfiles
LOGFILE=$WORK_DIRECTORY/log_errTests.$$ # Name of the test logfile
LIBTLOG=$WORK_DIRECTORY/log_libneTests.$$ # Name of the libneTest output logfile
DATAFILE=$WORK_DIRECTORY/testfile.$$
OUTFILE=$WORK_DIRECTORY/outfile.$$
EPAT=$WORK_DIRECTORY/testout.%d.$$
FSZ=20  # Size of the input file in 10s of MBytes (i.e. a value of 20 -> 200M file)

re='^[0-9]+$'

if [[ $# -gt 0 ]]; then
   if [[ $1 =~ $re ]]; then
      ITER=$1
   else
      echo "erasureTest: warning: ignoring unrecognized arumgent \"$1\", expected an integer number of stripes to be tested"
   fi
fi
if [[ $# -gt 1 ]]; then
   if [[ $2 =~ $re ]]; then 
      INITER=$2
   else
      echo "erasureTest: warning: ignoring unrecognized arumgent \"$2\", expected an integer number of error patterns per stripe to be tested"
   fi
fi

CREATED_WRKDIR=0

if [[ ! -e $WORK_DIRECTORY ]]; then
   echo -n "Creating working directory \"$WORK_DIRECTORY\"..."
   mkdir -p $WORK_DIRECTORY
   CREATED_WRKDIR=1
   echo "done"
fi

echo
echo "Testing erasure library functions..."
echo "   Tests to perform:  $ITER stripings with $INITER error patterns apiece ( $(( ITER * INITER )) Tests Total )"

stfmt="-c%s"

{ stat $stfmt /dev/null 2>&1; } > /dev/null
ret=$?
if [[ $ret -ne 0 ]]; then
   stfmt="-f %z"
   { stat $stfmt /dev/null 2>&1; } > /dev/null
   ret=$?
   if [[ $ret -ne 0 ]]; then
      echo "Failed to identify proper 'stat' argument format!"
      exit -1
   fi
fi

if [[ ! -e libneTest ]]; then
   echo "erasureTest: error: could not locate executable \"libneTest\", please run this script from within the \"erasureLib\" directory!"
   exit 1
fi

re=".* Active.*"

ret=$( ./libneTest crc-status | tail -n 2 )
crcs=$( echo "$ret" | tail -n 1 )
ret=$( echo "$ret" | head -n 1 )
maxN=$( echo "$ret" | awk '{print $2}' )
maxE=$( echo "$ret" | awk '{print $4}' )
echo "   MaxN: $maxN   MaxE: $maxE"
echo
if [[ $crcs =~ $re ]]; then
   ICRC=0
   echo "INTERMEDIATE CRCS - ACTIVE"
else
   ICRC=1
   echo "INTERMEDIATE CRCS - INACTIVE"
fi

re='^[0-9]+$'

command -v bc >/dev/null 2>&1
BC=$?

if [[ $BC -ne 0 ]]; then
   echo "Note: command 'bc' could not be found.  Times will be displayed as ranges and averages will be skipped!"
fi

echo "Generating input file '$DATAFILE' (this will take some time)..."
dd if=/dev/urandom of=$DATAFILE bs=10485760 count=$FSZ
echo "done"
echo

FSZ=$(( FSZ * 10485760 ))

echo "Created $DATAFILE" >> $LOGFILE
echo >> $LOGFILE

cnt=0
while [[ $cnt -lt $ITER ]]; do
   n=$RANDOM
   let "n %= maxN"
   n=$(( n + 1 ))
   e=$RANDOM
   let "e %= maxE"
   e=$(( e + 1 ))
   start=$RANDOM
   let "start %= $(( n + e ))"

   err_free=0

   echo
   echo "Generating $n+$e striping starting at file $start..."
   echo >> $LOGFILE
   echo >> $LIBTLOG
   echo "Generating $n+$e striping starting at file $start""..." >> $LOGFILE
#   tcnt=$( date +%s%N )
   { ret=$( time -p ./libneTest write $DATAFILE $EPAT $n $e $start $FSZ 2>&1 | tee -a $LIBTLOG | tail -n 1 ); } 2>> $TLOGPREF$$.write

#   tcnt="`date +%s%N` - $tcnt"
#   if [[ $BC -eq 0 ]]; then
#      tcnt=$( echo "$tcnt" | bc )
#   fi

   if [[ ! $ret =~ $re  ||  $ret -ne 0 ]]; then
      echo -e "\033[0;31mFAIL - write operation returned an unexpected status"
      echo -e "CMD = ./libneTest write $DATAFILE $EPAT $n $e $start $FSZ\033[0m"
      echo "   FAILURE: wite operation returned a non-sero status" >> $LOGFILE
      echo "CMD = ./libneTest write $DATAFILE $EPAT $n $e $start $FSZ" >> $LOGFILE
      exit -1
   fi
#   echo "...done.  Elapsed time = $tcnt""."
   echo "   stripe generation complete" >> $LOGFILE
#   echo "$tcnt" >> $TLOGPREF$$.write
   echo
   ls $( echo "$EPAT" | sed 's/%d/\*/' )
   echo

   incnt=0
   while [[ $incnt -lt $INITER ]]; do

      if [[ $incnt -ne 0 ]]; then
         echo "Continuing with the same $n+$e striping..."
         echo >> $LOGFILE
         echo "Continuring to use $n+$e striping with start $start..." >> $LOGFILE
         echo
      fi

      nerr=$RANDOM
      let "nerr %= $(( e + 1 ))"

      if [[ $nerr -eq 0 ]]; then
         if [[ $err_free -eq 1 ]]; then
            nerr=$e
         fi
         err_free=1
      fi

      npat=""
      maxpos=$(( n + e - nerr + 1 ))
      oldpos=0
      errcnt=0
      errpos=-1
      readerr=1 # read should now detect all errors
      silent_count=0

      echo "$nerr error(s) are to be inserted..."
      echo "Inserting $nerr error(s)..." >> $LOGFILE
      
      {

         stat=0

         while [[ $errcnt -lt $nerr ]]; do
            while [[ $errpos -lt $oldpos ]]; do
               errpos=$RANDOM
               let "errpos %= maxpos"
            done

            echo "   placing error at $errpos""..."
            echo "   placing error at $errpos""..." >> $LOGFILE
            stat=$(( stat + 2**errpos ))

            efile=$( echo "$EPAT" | sed 's/%d/'"$errpos"'/' )

            echo "   creating backup of $efile""..."
            cp $efile "$efile".backup

            truepos=$(( errpos - start ))
            if [[ $truepos -lt 0 ]]; then
               truepos=$(( truepos + n + e ))
            fi
               
            if [[ $truepos -lt $n ]]; then
               readerr=1
            fi

            ctype=$(( RANDOM % (3-ICRC) ))
            if [[ $ctype -eq 0 ]]; then
               echo "   corrupting file $efile ( corruption-type : removal )"
               echo "   corrupting file $efile ( corruption-type : removal )" >> $LOGFILE
               rm $efile
            elif [[ $ctype -eq 1 ]]; then
               err_list[$silent_count]=$errpos
               silent_count=$(( silent_count + 1 ))
               echo "   corrupting file $efile ( corruption-type : truncate )"
               echo "   corrupting file $efile ( corruption-type : truncate )" >> $LOGFILE
               fsize=$( stat $stfmt $efile )
               corr=$(( `od -N 4 -t uL -An /dev/urandom | awk '{print $1}'` % fsize ))
               echo "      truncating from $fsize to $corr bytes"
               echo "      truncating from $fsize to $corr bytes" >> $LOGFILE
               #dd if=$efile of=$efile.tmp bs=1 count=$corr > /dev/null 2>&1
               #rm $efile
               #mv $efile.tmp $efile
               truncate -s $corr $efile
               echo "   creating backup of corrupted file..."
               cp $efile "$efile".corrupted
            else
               err_list[$silent_count]=$errpos
               silent_count=$(( silent_count + 1 ))
               echo "   corrupting file $efile ( corruption-type : silent )"
               echo "   corrupting file $efile ( corruption-type : silent )" >> $LOGFILE
               fsize=$( stat $stfmt $efile )
               corr=$(( `od -N 4 -t uL -An /dev/urandom | awk '{print $1}'` % fsize ))
               offset=$(( `od -N 4 -t uL -An /dev/urandom | awk '{print $1}'` % ( fsize - corr ) ))
               echo "      inserting $corr random bytes at offset $offset"
               echo "      inserting $corr random bytes at offset $offset" >> $LOGFILE

               corrmegab=$(( ($corr / 1048576) + 1 ))
               dd if=/dev/urandom of="$efile".esource bs=1M count=$corrmegab > /dev/null 2>&1

               cp $efile $efile".tmp"
               diff=0
               while [[ $diff -eq 0 ]]; do
                  dd if="$efile".esource of=$efile bs=1c count=$corr seek=$offset conv=notrunc > /dev/null 2>&1
                  diff $efile $efile".tmp" > /dev/null 2>&1
                  diff=$?
                  if [[ $diff -eq 0 ]]; then
                     echo "      corrption insertion did not alter file, retrying..."
                  fi
               done
               rm $efile".tmp"
               rm "$efile".esource
               echo "   creating backup of corrupted file..."
               cp $efile "$efile".corrupted
            fi

            while [[ $oldpos -lt $errpos ]]; do
               if [[ $npat == "" ]]; then
                  npat="0"
               else
                  npat="$npat"".0"
               fi
               oldpos=$(( oldpos + 1 ))
            done

            if [[ $npat == "" ]]; then
               npat="1"
            else
               npat="$npat"".1"
            fi
            echo "   error creation successful"
            echo "   error creation successful" >> $LOGFILE
            oldpos=$(( oldpos + 1 ))
            
            errcnt=$(( errcnt + 1 ))
            maxpos=$(( maxpos + 1 ))
         done

         maxpos=$(( maxpos - 1 ))

         while [[ $oldpos -lt $maxpos ]]; do
            if [[ $npat == "" ]]; then
               npat="0"
            else
               npat="$npat"".0"
            fi
            oldpos=$(( oldpos + 1 ))
         done

         echo "error insertion complete, pattern is : $npat"
         echo "Errors inserted, pattern is  $npat" >> $LOGFILE
         echo

         tstat=$stat
         tmp=0
         while [[ $readerr -eq 0  &&  $tmp -lt $silent_count ]]; do
            errpos=${err_list[$tmp]}
            truepos=$(( errpos - start ))
            if [[ $truepos -lt 0 ]]; then
               truepos=$(( truepos + n + e ))
            fi

            if [[ ! $truepos -lt $n ]]; then
               tstat=$(( tstat - (2**errpos) ))
            fi

            tmp=$(( tmp + 1 ))
         done

         echo >> $LIBTLOG

         echo -n "Verifying corruption pattern (expecting pattern $stat)..."
         echo "Verifying corruption pattern (expecting pattern $stat)..." >> $LOGFILE

         { ret=$( time -p ./libneTest status $EPAT 2>&1 | tail -n 1 ); } 2>>$TLOGPREF$$.status

         if [[ ! $ret =~ $re  ||  $ret -ne $stat ]]; then
            echo
            echo -e "\033[0;31mFAIL - status check returned an unexpected error pattern"
            echo -e "CMD = ./libneTest status $EPAT\033[0m"
            echo "FAIL - status check returned an unexpected error pattern" >> $LOGFILE
            echo "CMD = ./libneTest status $EPAT" >> $LOGFILE
            exit -1
         fi
         echo "corruption pattern matches"
         echo

         echo -n "Performing a read of all data from striping (expected return value = $tstat)..."
         echo "Performing read of all data from striping (expected return value = $tstat)..." >> $LOGFILE

         noinfo=$RANDOM
         let "noinfo %= 2"
         if [[ $noinfo -eq 1 ]]; then
            echo -n "ignoring stripe state for this read..."
            echo "   Using N=0 to perform read while ignoring stripe state..." >> $LOGFILE
            tN=0
         else
            tN=$n
         fi
         
         RFAIL=0

         { ret=$( time -p ./libneTest read $OUTFILE $EPAT $tN $e $start $FSZ 2>&1 | tee -a $LIBTLOG | tail -n 1 ); } 2>> $TLOGPREF$$.read
         
         if [[ ! $ret =~ $re  ||  $ret -gt $tstat  ||  ( $ICRC -eq 1  &&  $ret -ne $tstat ) ]]; then
            echo
            echo -e "\033[0;31mFAIL - read operation returned an inappropriate status, expected $tstat but recieved $ret"
            echo -e "CMD = ./libneTest read $OUTFILE $EPAT $tN $e $start $FSZ\033[0m"
            echo "   FAILURE: read operation returned an inappropriate status, expected $tstat but recieved $ret" >> $LOGFILE
            echo "CMD = ./libneTest read $OUTFILE $EPAT $tN $e $start $FSZ" >> $LOGFILE
            exit -1
         elif [[ $ret -lt $tstat ]]; then
            echo
            echo -e "\033[0;33mWARNING - read operation returned an inappropriate status, expected $tstat but recieved $ret"
            echo -e "This may simply be the result of silent corruption present in the zero fill (undetectable on read)"
            echo -e "CMD = ./libneTest read $OUTFILE $EPAT $tN $e $start $FSZ\033[0m"
            echo "   WARNING: read operation returned an inappropriate status, expected $tstat but recieved $ret" >> $LOGFILE
            echo "CMD = ./libneTest read $OUTFILE $EPAT $tN $e $start $FSZ" >> $LOGFILE
            RFAIL=1
         fi
         echo "read completed"
         echo
         
         echo -n "Performing comparison..."
         echo "Performing comparison..." >> $LOGFILE
         cmp $DATAFILE $OUTFILE

         if [[ $? -ne 0 ]]; then
            echo
            echo -e "\033[0;31mFAIL - output does not match expected data"
            echo -e "        compared $DATAFILE and $OUTFILE"
            echo -e "CMD = ./libneTest read $OUTFILE $EPAT $n $e $start $FSZ\033[0m"
            echo "   FAILURE: output of ne_read does not match the expected data" >> $LOGFILE
            echo "            compared $DATAFILE and $OUTFILE" >> $LOGFILE
            echo "CMD = ./libneTest read $OUTFILE $EPAT $n $e $start $FSZ" >> $LOGFILE
            exit -1
         fi
         echo "Comparison passed"
         echo "Comparison passed" >> $LOGFILE
      
         echo -n "Cleaining up output..."
         echo "Cleaining up output..." >> $LOGFILE
         rm $OUTFILE
         echo "done"
         echo

         echo -n "Performing \"no-output\" read of all data from striping (expected return value = $tstat)..."
         echo "Performing \"no-output\" read of all data from striping (expected return value = $tstat)..." >> $LOGFILE

         noinfo=$RANDOM
         let "noinfo %= 2"
         if [[ $noinfo -eq 1 ]]; then
            echo -n "ignoring stripe state for this read..."
            echo "   Using N=0 to perform read while ignoring stripe state..." >> $LOGFILE
            tN=0
         else
            tN=$n
         fi
         
         { ret=$( time -p ./libneTest read /dev/null $EPAT $tN $e $start $FSZ 2>&1 | tee -a $LIBTLOG | tail -n 1 ); } 2>> $TLOGPREF$$.no_read
         
         if [[ ! $ret =~ $re  ||  $ret -gt $tstat  ||  ( $RFAIL -eq 0  &&  $ret -ne $tstat ) ]]; then
            echo
            echo -e "\033[0;31mFAIL - read operation returned an inappropriate status, expected $tstat but recieved $ret"
            echo -e "CMD = ./libneTest read /dev/null $EPAT $tN $e $start $FSZ\033[0m"
            echo "   FAILURE: read operation returned an inappropriate status, expected $tstat but recieved $ret" >> $LOGFILE
            echo "CMD = ./libneTest read /dev/null $EPAT $tN $e $start $FSZ" >> $LOGFILE
            exit -1
         elif [[ $ret -lt $tstat  &&  $RFAIL -eq 1 ]]; then
            echo
            echo -e "\033[0;33mWARNING - read operation returned an inappropriate status, expected $tstat but recieved $ret"
            echo -e "This may simply be the result of silent corruption present in the zero fill (undetectable on read)"
            echo -e "CMD = ./libneTest read /dev/null $EPAT $tN $e $start $FSZ\033[0m"
            echo "   WARNING: read operation returned an inappropriate status, expected $tstat but recieved $ret" >> $LOGFILE
            echo "CMD = ./libneTest read /dev/null $EPAT $tN $e $start $FSZ" >> $LOGFILE
         fi
         echo "read completed"
         echo

         if [[ $npat == *"1"* ]]; then
            echo >> $LIBTLOG
            echo -n "Attempting error recovery..."
            echo "Attempting error recovery..." >> $LOGFILE

            noinfo=$RANDOM
            let "noinfo %= 2"
            if [[ $noinfo -eq 1 ]]; then
               echo -n "ignoring stripe state for this rebuild..."
               echo "   Using N=0 to perform rebuild while ignoring stripe state..." >> $LOGFILE
               tN=0
            else
               tN=$n
            fi
            
            { ret=$( time -p ./libneTest rebuild $EPAT $tN $e $start 2>&1 | tee -a $LIBTLOG | tail -n 1 ); } 2>>$TLOGPREF$$.recovery


            if [[ ! $ret =~ $re  ||  $ret -ne $stat ]]; then
               echo
               echo -e "\033[0;31mFAIL - ne_rebuild has failed, expected return of $stat but recieved $ret"
               echo -e "CMD = ./libneTest rebuild $EPAT $tN $e $start\033[0m"
               echo "   FAILURE: an error occured within ne_rebuild, expected return of $stat but recieved $ret" >> $LOGFILE
               echo "CMD = "./libneTest rebuild $EPAT $tN $e $start >> $LOGFILE
               exit $ret
            fi
            echo "rebuild completed"
            echo

            ls $( echo "$EPAT*" | sed 's/%d/\*/' ) | while read -r line; do
               if [[ -e "$line".backup ]]; then
                  echo -n "Performing comparison against original file = \"""$line"".backup\"..."
                  echo "Performing comparison against original file = \"""$line"".backup\"..." >> $LOGFILE
                  cmp "$line" "$line".backup

                  if [[ $? -ne 0 ]]; then
                     echo
                     echo -e "\033[0;31mFAIL - rebuild output does not match expected data"
                     echo -e "        compared $line and $line"".backup"
                     echo -e "CMD = ./libneTest rebuild $EPAT $n $e $start\033[0m"
                     echo "   FAILURE: output of ne_rebuild does not match the expected data" >> $LOGFILE
                     echo "            compared $line and $line"".backup" >> $LOGFILE
                     echo "CMD = ./libneTest rebuild $EPAT $n $e $start" >> $LOGFILE
                     exit -1
                  fi
                  echo "Comparison passed"
                  echo -n "Removing backup file..."
                  echo "Comparison passed. Removing backup file." >> $LOGFILE
                  rm "$line".backup
                  if [[ -e "$line".corrupted ]]; then
                     cmp "$line".corrupted "$line".rebuild_bkp.*
                     if [[ $? -ne 0 ]]; then
                        echo
                        echo -e "\033[0;31mFAIL - rebuild backup does not match expected data"
                        echo -e "        compared $line"".corrupted and $line"".rebuild_bkp.*"
                        echo -e "CMD = ./libneTest rebuild $EPAT $n $e $start\033[0m"
                        echo "   FAILURE: output of ne_rebuild backup file does not match the expected data" >> $LOGFILE
                        echo "            compared $line"".corrupted and $line"".rebuild_bkp.*" >> $LOGFILE
                        echo "CMD = ./libneTest rebuild $EPAT $n $e $start" >> $LOGFILE
                        exit -1
                     fi

                     echo -n "Removing backup corrupted file..."
                     echo "Removing backup corrupted file." >> $LOGFILE
                     rm "$line".corrupted

                     echo -n "Removing backup pre-rebuild file..."
                     echo "Removing backup pre-rebuild file." >> $LOGFILE
                     rm "$line".rebuild_bkp.*
                  fi
                  echo "done"
               fi
            done

            if [[ $? -ne 0 ]]; then
               exit -1
            fi

         fi

         echo -n "Checking the striping for corruption..."
         echo "Checking the striping for corruption..." >> $LOGFILE

         { ret=$( time -p ./libneTest status $EPAT 2>&1 | tee -a $LIBTLOG | tail -n 1 ); } 2>>$TLOGPREF$$.status

         if [[ ! $ret =~ $re  ||  $ret -ne 0 ]]; then
            echo
            echo -e "\033[0;31mFAIL - status check indicates corruption present in erasure striping ( code : $ret )"
            echo -e "CMD = ./libneTest status $EPAT\033[0m"
            echo "FAIL - status check indicates corruption present in erasure striping ( code : $ret )" >> $LOGFILE
            echo "CMD = ./libneTest status $EPAT" >> $LOGFILE
            exit $ret
         fi
         echo "done"
         echo


         #All tests passed for this iteration
         if [[ $incnt -gt 0 ]]; then
            echo -e "\033[0;32mPASS - $n+$e with start position $start (reused)"
         else
            echo -e "\033[0;32mPASS - $n+$e with start position $start"
         fi
         echo -e "       and error pattern   $npat"
         echo -e "       ( Test $(( (cnt*INITER) + incnt + 1 )) )\033[0m"

         echo "PASS - $n+$e with start position $start" >> $LOGFILE 
         echo "       and error pattern   $npat" >> $LOGFILE
         echo "       ( Test $(( (cnt + 1) * (incnt + 1) )) )" >> $LOGFILE
      }

      sleep $POSTSLEEP

      echo -n "Removing libneTest log file..."
      rm $LIBTLOG
      echo "done"

      incnt=$(( incnt + 1 ))
   done

   echo -n "Cleaning up file array..."
   ./libneTest delete $EPAT $(( n + e )) > /dev/null
   if [[ $? -ne 0 ]]; then
      echo
      echo -e "\033[0;31mDeletion failure...continuing.\033[0m"
      echo "Deletion failure...continuing." >> $LOGFILE
   else
      echo "done"
   fi
   echo -n "Cleaning up test log..."
   rm $LOGFILE
   echo "done"

   cnt=$(( cnt + 1 ))
done

echo

if [[ $BC -eq 0 ]]; then
   output=""
   echo -n "Generating average times..."
   tcnt="( 0.0"
   count=0

   while read -r line; do
      line=$( echo "$line" | awk '{print $2}' )
      tcnt="$tcnt + $line"
      count=$(( count + 1 ));
   done < "$TLOGPREF$$.write"
   count=$(( count / 3 ));

   if [[ $count -ne 0 ]]; then
      tcnt=$( echo "$tcnt ) / $count" | bc -l )
      output="$output\nWrites:,Performed = $count,AvgTime = $tcnt Seconds"
   fi

   tcnt="( 0.0"
   count=0

   while read -r line; do
      line=$( echo "$line" | awk '{print $2}' )
      tcnt="$tcnt + $line"
      count=$(( count + 1 ));
   done < "$TLOGPREF$$.read"
   count=$(( count / 3 ));

   if [[ $count -ne 0 ]]; then
      tcnt=$( echo "$tcnt ) / $count" | bc -l )
      output="$output\nReads:,Performed = $count,AvgTime = $tcnt Seconds"
   fi

   tcnt="( 0.0"
   count=0

   while read -r line; do
      line=$( echo "$line" | awk '{print $2}' )
      tcnt="$tcnt + $line"
      count=$(( count + 1 ));
   done < "$TLOGPREF$$.no_read"
   count=$(( count / 3 ));

   if [[ $count -ne 0 ]]; then
      tcnt=$( echo "$tcnt ) / $count" | bc -l )
      output="$output\nNo-Output Reads:,Performed = $count,AvgTime = $tcnt Seconds"
   fi

   tcnt="( 0.0"
   count=0

   while read -r line; do
      line=$( echo "$line" | awk '{print $2}' )
      tcnt="$tcnt + $line"
      count=$(( count + 1 ));
   done < "$TLOGPREF$$.recovery"
   count=$(( count / 3 ));

   if [[ $count -ne 0 ]]; then
      tcnt=$( echo "$tcnt ) / $count" | bc -l )
      output="$output\nRecoveries:,Performed = $count,AvgTime = $tcnt Seconds"
   fi

   tcnt="( 0.0"
   count=0

   while read -r line; do
      line=$( echo "$line" | awk '{print $2}' )
      tcnt="$tcnt + $line"
      count=$(( count + 1 ));
   done < "$TLOGPREF$$.status"
   count=$(( count / 3 ));

   if [[ $count -ne 0 ]]; then
      tcnt=$( echo "$tcnt ) / $count" | bc -l )
      output="$output\nStatus:,Performed = $count,AvgTime = $tcnt Seconds"
   fi

   { res=$( printf "$output\n" | column -s "," -o "   " -t ); } 2>/dev/null

   if [[ $? -ne 0 ]]; then
      { res=$( printf "$output\n" | column -s "," -c 100 -t ); } 2>/dev/null
   fi

   echo "done"
   echo "$res"

   echo
fi

echo -n "Cleaning up remaining files..."
rm $DATAFILE
echo "done"
echo -n "Removing time files..."
rm $TLOGPREF$$.*
echo "done"
if [[ $CREATED_WRKDIR == 1 ]]; then
   echo -n "Deleting working directory..."
   rmdir $WORK_DIRECTORY
   ret=$?
   if [[ $ret -ne 0 ]]; then
      echo -e "\033[0;31mfailure\033[0m"
      echo "Failed to delete working directory!  Terminating anyway." >> $LOGFILE
   else
      echo "done"
   fi
fi

